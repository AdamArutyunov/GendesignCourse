import os
import time
import json

from dotenv import load_dotenv
from telegram import LabeledPrice, Bot
from telegram.ext import CommandHandler, MessageHandler, Updater, Dispatcher, PreCheckoutQueryHandler, Filters


load_dotenv()

TOKEN = os.getenv('TOKEN')
PAYMENT_PROVIDER_TOKEN = os.getenv('PROVIDER_TOKEN')
PROMOCODE_PRICES = {
    'park_f8Ek39v1f': 5500,
    'test_nv82REg9a': 100,
    None: 7500,
}
LOG_CHAT_ID = -1001665135759
SUCCESS_LINK = 'https://t.me/+PsBgiiSkBuJhMGUy'
ADMINS = [115178271, 227496872]
MODES = ['active', 'contact']

data = None

def save_data():
    with open('data.json', 'w') as f:
        json.dump(data, f)


def load_data():
    global data

    try:
        with open('data.json') as f:
            data = json.load(f)
    except Exception as f:
        data = {'mode': 'active', 'subscribers': []}
        save_data()


def start(update, context):
    if data['mode'] == 'active':
        return send_invoice(update, context)

    elif data['mode'] == 'contact':
        return send_contact_prompt(update, context)


def send_contact_prompt(update, context):
    message = '''<b>–û–π.</b>

–ú–µ—Å—Ç –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫ –Ω–µ—Ç, –≤—Å—ë —Ä–∞—Å–∫—É–ø–∏–ª–∏. –ß—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –º—ã –ø–æ–∑–≤–∞–ª–∏ –≤–∞—Å  –ø –µ —Ä —Å –æ –Ω –∞ –ª —å –Ω –æ, –Ω–∞–∂–º–∏—Ç–µ /sub. –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é /unsub.

–ê –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —Ç—É—Å–∏—Ç—å <a href='https://t.me/gen_c'>–≤ –≥–µ–Ω–∫–ª—É–±</a>! –ù—É, –∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã <a href='https://t.me/ivandianov'>–ò–≤–∞–Ω–∞ –î–∏–∞–Ω–æ–≤–∞</a> –∏ <a href='https://t.me/cdarr'>–ê–¥–∞–º–∞ –ê—Ä—É—Ç—é–Ω–æ–≤–∞</a> –≤—ã –∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å, –¥–∞?'''

    update.message.reply_text(message, parse_mode='HTML')


def get_subscriber(chat_id):
    subscribers = list(filter(lambda u: u['chat_id'] == chat_id, data['subscribers']))

    if not subscribers:
        return None

    return subscribers[0]


def subscribe(update, context):
    chat_id = update.message.chat_id
    username = update.message.from_user.username

    subscriber = get_subscriber(chat_id)

    if subscriber:
        update.message.reply_text('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–µ–º, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫. –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /unsub.')
    else:
        data['subscribers'].append({'chat_id': chat_id, 'username': username})
        save_data()

        update.message.reply_text('–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–µ–º, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫. –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /unsub.')


def unsubscribe(update, context):
    chat_id = update.message.chat_id
    subscriber = get_subscriber(chat_id)

    if subscriber:
        data['subscribers'].remove(subscriber)
        save_data()

        update.message.reply_text('–û—Ç–ø–∏—Å–∞–ª–∏ –≤–∞—Å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–∞—Ö –Ω–∞ –∫—É—Ä—Å. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /sub.')
    else:
        update.message.reply_text('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–∞—Ö –Ω–∞ –∫—É—Ä—Å. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /sub.')


def print_subscribers(update, context):
    if update.message.chat_id not in ADMINS:
        return update.message.reply_text('–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.')


    subscribers = data['subscribers']

    out = '<b>–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n\n'
    for subscriber in subscribers:
        out += f'@{subscriber["username"]}\n'

    update.message.reply_text(out, parse_mode='HTML')


def send_invoice(update, context):
    """Sends an invoice without shipping-payment."""
    args = context.args

    chat_id = update.message.chat_id
    title = "–ö—É—Ä—Å –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞"
    description = "–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ https://course.genclub.club.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ @adam_arutyunov.\n"
    photo_url = 'https://course.genclub.club/images/og.jpg'
    payload = "Gendesign-Course-Payload"

    currency = "RUB"
    
    if args and args[0] in PROMOCODE_PRICES:
        price = PROMOCODE_PRICES[args[0]]
    else:
        price = PROMOCODE_PRICES[None]

    prices = [LabeledPrice("–ó–∞–ø–ª–∞—Ç–∏—Ç—å", price * 100)]

    context.bot.send_invoice(
        chat_id, title, description, payload, PAYMENT_PROVIDER_TOKEN, currency, prices,
        'start', photo_url,
        need_email=True,
    )


def precheckout_callback(update, context):
    """Answers the PreCheckoutQuery"""

    query = update.pre_checkout_query

    if query.invoice_payload != "Gendesign-Course-Payload":
        query.answer(ok=False, error_message="Something went wrong...")
    else:
        query.answer(ok=True)


def successful_payment_callback(update, context):
    """Confirms the successful payment."""
    update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: " + SUCCESS_LINK)

    payment = update.message.successful_payment
    user = update.message.from_user.username

    message = '<b>üéâ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂!</b>\n\n'
    message += f'–°—É–º–º–∞: {payment.total_amount // 100} {payment.currency}\n'
    message += f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user}\n'
    message += f'–ü–æ—á—Ç–∞: {payment.order_info.email}\n'
    message += f'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –Æ–ö–∞—Å—Å–µ: {payment.provider_payment_charge_id}'

    bot.send_message(chat_id=LOG_CHAT_ID, text=message, parse_mode='HTML')


def change_mode(update, context):
    chat_id = update.message.chat_id

    if chat_id not in ADMINS:
        update.message.reply_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–µ–∂–∏–º –±–æ—Ç–∞.')
        return

    
    args = context.args
    if not args or not args[0] or args[0] not in MODES:
        return update.message.reply_text('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: ' + ', '.join(MODES) + '.')

    data['mode'] = args[0]
    save_data()

    update.message.reply_text('–†–µ–∂–∏–º –±–æ—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ' + args[0] + '.')


if __name__ == '__main__':
    load_data()

    bot = Bot(token=TOKEN)

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    print('Bot initialized.')

    dp.add_handler(CommandHandler("start", start, pass_args=True))
    dp.add_handler(CommandHandler("mode", change_mode, pass_args=True))
    dp.add_handler(CommandHandler("sub", subscribe))
    dp.add_handler(CommandHandler("unsub", unsubscribe))
    dp.add_handler(CommandHandler("subscribers", print_subscribers))

    dp.add_handler(PreCheckoutQueryHandler(precheckout_callback))

    dp.add_handler(
        MessageHandler(Filters.successful_payment, successful_payment_callback)
    )

    
    print('Starting bot...')

    updater.start_polling()

